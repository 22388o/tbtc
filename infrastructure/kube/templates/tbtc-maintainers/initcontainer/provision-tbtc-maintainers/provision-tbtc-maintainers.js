const fs = require('fs');
const toml = require('toml');
const tomlify = require('tomlify-j0.4');
const Web3 = require('web3');
const HDWalletProvider = require("@truffle/hdwallet-provider");

// ETH host info
const ethRPCUrl = process.env.ETH_RPC_URL;
const ethWSUrl = process.env.ETH_WS_URL;
const ethNetworkId = process.env.ETH_NETWORK_ID;

// Contract owner info
var contractOwnerAddress = process.env.CONTRACT_OWNER_ETH_ACCOUNT_ADDRESS;
var purse = contractOwnerAddress;

var contractOwnerProvider = new HDWalletProvider(process.env.CONTRACT_OWNER_ETH_ACCOUNT_PRIVATE_KEY, ethRPCUrl);

var operatorAddress = process.env.TBTC_MAINTAINERS_ETH_ACCOUNT_ADDRESS
var operatorPrivateKey = process.env.TBTC_MAINTAINERS_ETH_ACCOUNT_PRIVATE_KEY

/*
We override transactionConfirmationBlocks and transactionBlockTimeout because they're
25 and 50 blocks respectively at default.  The result of this on small private testnets
is long wait times for scripts to execute.
*/
const web3_options = {
  defaultBlock: 'latest',
  defaultGas: 4712388,
  transactionBlockTimeout: 25,
  transactionConfirmationBlocks: 3,
  transactionPollingTimeout: 480
};
const web3 = new Web3(contractOwnerProvider, null, web3_options);

/*
Each <contract.json> file is sourced directly from the InitContainer.  Files are generated by
Truffle during contract and copied to the InitContainer image via Circle.
*/
const tbtcSystemJsonFile = '/tmp/TBTCSystem.json';
const tbtcSystemParsed = JSON.parse(fs.readFileSync(tbtcSystemJsonFile));
const tbtcSystemContractAddress = tbtcSystemParsed.networks[ethNetworkId].address;

async function provisionTbtcMaintainers() {

  try {

    console.log('###########  Provisioning tbtc-maintainers! ###########');
    console.log('\n<<<<<<<<<<<< Setting Up Operator Account ' + '>>>>>>>>>>>>');

    console.log('\n<<<<<<<<<<<< Funding Operator Account ' + operatorAddress + ' >>>>>>>>>>>>');
    await fundOperatorAccount(operatorAddress, purse, '1');

    console.log('\n<<<<<<<<<<<< Creating tbtc-maintainers Config File >>>>>>>>>>>>');
    await createTbtcMaintainersConfig();

    console.log("\n########### tbtc-maintainers Provisioning Complete! ###########");
    process.exit()
  }
  catch (error) {
    console.error(error.message);
    throw error;
  }
};

async function fundOperatorAccount(operatorAddress, purse, requiredEtherBalance) {

  let requiredBalance = web3.utils.toWei(requiredEtherBalance, 'ether')

  const currentBalance = web3.utils.toBN(await web3.eth.getBalance(operatorAddress))
  if (currentBalance.gte(requiredBalance)) {
    console.log('Operator address is already funded, exiting!')
    return
  }
};

async function createTbtcMaintainersConfig() {

  let parsedConfigFile = toml.parse(fs.readFileSync('/tmp/tbtc-maintainers-config-template.toml', 'utf8'))

  parsedConfigFile.ethereum.URL = ethWSUrl;
  parsedConfigFile.ethereum.PrivateKey = operatorPrivateKey

  console.log("TBTCSystem contract address:", tbtcSystemContractAddress)
  parsedConfigFile.ethereum.ContractAddresses.TBTCSystem = tbtcSystemContractAddress;

  fs.writeFileSync('/mnt/tbtc-maintainers/config/tbtc-maintainers-config.toml', tomlify.toToml(parsedConfigFile))
  console.log("tbtc-maintainers config written to /mnt/tbtc-maintainers/config/tbtc-maintainers-config.toml");
};

provisionTbtcMaintainers().catch(error => {
  console.error(error);
  process.exit(1);
});
