name: Solidity

on:
  push:
    branches:
      - master
    paths:
      - "solidity/**"
  pull_request:
  workflow_dispatch:

jobs:
  contracts-detect-changes:
    runs-on: ubuntu-latest
    outputs:
      path-filter: ${{ steps.filter.outputs.path-filter }}
    steps:
    - uses: actions/checkout@v2
      if: github.event_name == 'pull_request' 
    - uses: dorny/paths-filter@v2
      if: github.event_name == 'pull_request' 
      id: filter
      with:
        filters: |
          path-filter:
            - './solidity/**'

  contracts-build-and-test:
    needs: contracts-detect-changes
    if: |
      github.event_name != 'pull_request'
        || needs.contracts-detect-changes.outputs.path-filter == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./solidity
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: "12.x"

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-solidity-node-modules
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install dependencies
        run: npm ci

      - name: Compile contracts
        run: npm run compile

      - name: Run tests
        run: npm run test:quick

  contracts-lint:
    needs: contracts-detect-changes
    if: |
      github.event_name != 'pull_request'
        || needs.contracts-detect-changes.outputs.path-filter == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./solidity
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: "12.x"

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-solidity-node-modules
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

  contracts-migrate-and-publish-ethereum:
    needs: [contracts-build-and-test, contracts-lint]
    if: | # TODO: remove 'rfc-18' condition one tested
      (github.ref == 'refs/heads/master'
        && github.event_name != 'pull_request')
        || github.ref == 'refs/heads/rfc-18/load-env-var'
    environment: keep-test # keep-test requires a manual aproval
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]
    defaults:
      run:
        working-directory: ./solidity
    steps:
      - uses: actions/checkout@v2

      - name: Load environment variables
        uses: keep-network/load-env-variables@main # TODO: use @v1 once availible
        env: 
          CI_GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
        with:
          environment: 'ropsten'
          ref: 'master'

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-solidity-node-modules
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install dependencies
        run: npm ci

      - uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          project_id: ${{ env.GOOGLE_PROJECT_ID }}
          service_account_key: ${{ secrets.KEEP_TEST_GCR_JSON_KEY }}

      - name: Fetch external contracts artifacts
        env:
          CONTRACT_DATA_BUCKET_DIR: keep-ecdsa
          ETH_NETWORK_ID: ${{ env.NETWORK_ID }}
        run: ./scripts/ci-provision-external-contracts.sh

      - name: Resolve latest contracts
        run: npm update @keep-network/keep-ecdsa

      - name: Migrate contracts
        env:
          ETH_HOSTNAME: ${{ secrets.KEEP_TEST_ETH_HOSTNAME }}
          CONTRACT_OWNER_ETH_ACCOUNT_PRIVATE_KEY: |
            ${{ secrets.KEEP_TEST_ETH_CONTRACT_OWNER_PRIVATE_KEY }}
        run: npx truffle migrate --reset --network $TRUFFLE_NETWORK

      - name: Push contracts to Tenderly
        # TODO: once below action gets tagged replace `@main` with `@v1`
        uses: keep-network/tenderly-push-action@main
        continue-on-error: true
        with:
          working-directory: ./solidity
          tenderly-token: ${{ secrets.TENDERLY_TOKEN }}
          tenderly-project: thesis/keep-test
          eth-network-id: ${{ env.NETWORK_ID }}
          github-project-name: tbtc
          # version-tag: # TODO: resolve npm package version

      - name: Upload contract data
        run: |
          cd build/contracts
          gsutil -m cp * gs://${{ env.CONTRACT_DATA_BUCKET }}/tbtc

      - name: Copy artifacts
        run: |
          mkdir -p artifacts
          cp -r build/contracts/* artifacts/

      - name: Bump up package version
        uses: keep-network/npm-version-bump@v1
        with:
          workDir: ./solidity

      - name: Publish to npm
        run: |
          echo //registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }} > .npmrc
          npm publish --access=public

  contracts-migrate-and-publish-celo:
    needs: [contracts-build-and-test, contracts-lint]
    if: | # TODO: remove 'rfc-18' condition one tested
      (github.ref == 'refs/heads/master'
        && github.event_name != 'pull_request')
        || github.ref == 'refs/heads/rfc-18/load-env-var'
    environment: keep-test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./solidity
    steps:
      - uses: actions/checkout@v2

      - name: Load environment variables
        uses: keep-network/load-env-variables@main # TODO: use @v1 once availible
        env: 
          CI_GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
        with:
          environment: 'alfajores'
          ref: 'master'

      - uses: actions/setup-node@v2
        with:
          node-version: "12.x"

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-solidity-node-modules
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install dependencies
        run: npm ci

      - uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          project_id: ${{ env.GOOGLE_PROJECT_ID }}
          service_account_key: ${{ secrets.KEEP_TEST_GCR_JSON_KEY }}

      - name: Fetch external contracts artifacts
        env:
          CONTRACT_DATA_BUCKET_DIR: keep-ecdsa-celo
          ETH_NETWORK_ID: ${{ env.NETWORK_ID }}
        run: ./scripts/ci-provision-external-contracts.sh

      - name: Resolve latest contracts
        run: npm update @keep-network/keep-ecdsa

      - name: Migrate contracts
        env:
          CONTRACT_OWNER_CELO_ACCOUNT_PRIVATE_KEY: |
            ${{ secrets.KEEP_TEST_CELO_CONTRACT_OWNER_PRIVATE_KEY }}
        run: npx truffle migrate --reset --network $TRUFFLE_NETWORK

      - name: Upload contract data
        run: |
          cd build/contracts
          gsutil -m cp * gs://${{ env.CONTRACT_DATA_BUCKET }}/tbtc-celo

      # TODO: add NPM publish step once it's clear how artifacts should be tagged